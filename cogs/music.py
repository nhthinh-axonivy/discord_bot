import asyncio
import functools
import itertools
import math
import random
import discord
import yt_dlp as youtube_dl  # S·ª≠ d·ª•ng yt-dlp thay cho youtube_dl
from async_timeout import timeout
from discord.ext import commands

# T·∫Øt th√¥ng b√°o l·ªói kh√¥ng c·∫ßn thi·∫øt t·ª´ youtube_dl
youtube_dl.utils.bug_reports_message = lambda *args, **kwargs: ''


# --- ƒê·ªãnh nghƒ©a c√°c Exception t√πy ch·ªânh ---
class VoiceError(Exception):
    pass


class YTDLError(Exception):
    pass


# --- Class YTDLSource: X·ª≠ l√Ω t·∫£i th√¥ng tin v√† stream nh·∫°c t·ª´ YouTube/kh√°c ---
class YTDLSource(discord.PCMVolumeTransformer):
    YTDL_OPTIONS = {
        'format': 'bestaudio/best',
        'extractaudio': True,
        'audioformat': 'mp3',
        'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
        'restrictfilenames': True,
        'noplaylist': True,
        'nocheckcertificate': True,
        'ignoreerrors': False,
        'logtostderr': False,
        'quiet': True,
        'no_warnings': True,
        'default_search': 'auto',
        'source_address': '0.0.0.0',  # ƒê·ªÉ tr√°nh l·ªói bind
    }

    FFMPEG_OPTIONS = {
        'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
        'options': '-vn',
    }

    ytdl = youtube_dl.YoutubeDL(YTDL_OPTIONS)

    def __init__(self, ctx: commands.Context, source: discord.FFmpegPCMAudio, *, data: dict, volume: float = 0.5):
        super().__init__(source, volume)
        self.requester = ctx.author
        self.channel = ctx.channel
        self.data = data
        self.uploader = data.get('uploader')
        self.uploader_url = data.get('uploader_url')

        date_str = data.get('upload_date')
        if date_str and len(date_str) >= 8:
            self.upload_date = f"{date_str[6:8]}.{date_str[4:6]}.{date_str[0:4]}"
        else:
            self.upload_date = "Kh√¥ng x√°c ƒë·ªãnh"

        self.title = data.get('title')
        self.thumbnail = data.get('thumbnail')
        self.description = data.get('description')
        self.duration = self.parse_duration(int(data.get('duration', 0)))
        self.tags = data.get('tags')
        self.url = data.get('webpage_url')
        self.views = data.get('view_count', 0)
        self.likes = data.get('like_count', 0)
        self.stream_url = data.get('url')

    def __str__(self):
        return f'**{self.title}** by **{self.uploader}**'

    @classmethod
    async def create_source(cls, ctx: commands.Context, search: str, *, loop: asyncio.BaseEventLoop = None):
        loop = loop or asyncio.get_event_loop()

        try:
            partial_search = functools.partial(cls.ytdl.extract_info, search, download=False, process=False)
            data = await loop.run_in_executor(None, partial_search)
        except Exception as e:
            raise YTDLError(f"L·ªói khi t√¨m ki·∫øm: `{e}`")

        if data is None:
            raise YTDLError(f"Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o ph√π h·ª£p v·ªõi `{search}`.")

        if 'entries' not in data:
            process_info = data
        else:
            process_info = None
            for entry in data['entries']:
                if entry:
                    process_info = entry
                    break
            if process_info is None:
                raise YTDLError(f"Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o ph√π h·ª£p v·ªõi `{search}`.")

        webpage_url = process_info.get('webpage_url')
        if not webpage_url:
            raise YTDLError(f"Kh√¥ng t√¨m th·∫•y URL h·ª£p l·ªá cho `{search}`.")

        try:
            partial_process = functools.partial(cls.ytdl.extract_info, webpage_url, download=False)
            processed_info = await loop.run_in_executor(None, partial_process)
        except Exception as e:
            raise YTDLError(f"L·ªói khi t·∫£i th√¥ng tin chi ti·∫øt cho `{webpage_url}`: `{e}`")

        if processed_info is None:
            raise YTDLError(f"Kh√¥ng th·ªÉ t·∫£i th√¥ng tin chi ti·∫øt cho `{webpage_url}`.")

        if 'entries' not in processed_info:
            info = processed_info
        else:
            info = None
            while info is None:
                try:
                    info = processed_info['entries'].pop(0)
                except IndexError:
                    raise YTDLError(f"Kh√¥ng th·ªÉ truy xu·∫•t b·∫•t k·ª≥ k·∫øt qu·∫£ n√†o cho `{webpage_url}`.")

        if 'url' not in info:
            raise YTDLError(f"Kh√¥ng t√¨m th·∫•y URL stream cho `{info.get('title', 'b√†i h√°t n√†y')}`.")

        ffmpeg_path = ctx.bot.ffmpeg_path  # Truy c·∫≠p ƒë∆∞·ªùng d·∫´n ffmpeg t·ª´ bot
        return cls(ctx, discord.FFmpegPCMAudio(info['url'], executable=ffmpeg_path, **cls.FFMPEG_OPTIONS), data=info)

    @staticmethod
    def parse_duration(duration: int):
        if duration is None:
            return 'Kh√¥ng x√°c ƒë·ªãnh'
        minutes, seconds = divmod(duration, 60)
        hours, minutes = divmod(minutes, 60)
        days, hours = divmod(hours, 24)
        duration_parts = []
        if days > 0:
            duration_parts.append(f'{days} ng√†y')
        if hours > 0:
            duration_parts.append(f'{hours} gi·ªù')
        if minutes > 0:
            duration_parts.append(f'{minutes} ph√∫t')
        if seconds > 0:
            duration_parts.append(f'{seconds} gi√¢y')
        return ', '.join(duration_parts) if duration_parts else '0 gi√¢y'


# --- Class Song: ƒê·∫°i di·ªán cho m·ªôt b√†i h√°t trong h√†ng ƒë·ª£i ---
class Song:
    __slots__ = ('source', 'requester')

    def __init__(self, source: YTDLSource):
        self.source = source
        self.requester = source.requester

    def create_embed(self):
        embed = (discord.Embed(title='ƒêang ph√°t üé∂',
                               description=f'```css\n{self.source.title}\n```',
                               color=discord.Color.blurple())
                 .add_field(name='Th·ªùi l∆∞·ª£ng', value=self.source.duration, inline=True)
                 .add_field(name='Y√™u c·∫ßu b·ªüi', value=self.requester.mention, inline=True)
                 .add_field(name='Uploader', value=f'[{self.source.uploader}]({self.source.uploader_url})', inline=True)
                 .set_thumbnail(url=self.source.thumbnail))

        footer_text_parts = []
        if self.source.views is not None:
            footer_text_parts.append(f'L∆∞·ª£t xem: {self.source.views:,}')
        if self.source.likes is not None:
            footer_text_parts.append(f'L∆∞·ª£t th√≠ch: {self.source.likes:,}')
        if footer_text_parts:
            embed.set_footer(text=' | '.join(footer_text_parts))
        return embed


# --- Class SongQueue: H√†ng ƒë·ª£i b√†i h√°t ---
class SongQueue(asyncio.Queue):
    def __getitem__(self, item):
        if isinstance(item, slice):
            return list(itertools.islice(self._queue, item.start, item.stop, item.step))
        else:
            return self._queue[item]

    def __iter__(self):
        return self._queue.__iter__()

    def __len__(self):
        return self.qsize()

    def clear(self):
        self._queue.clear()

    def shuffle(self):
        random.shuffle(self._queue)

    def remove(self, index: int):
        if 0 <= index < len(self._queue):
            del self._queue[index]
            return True
        return False


# --- Class VoiceState: Qu·∫£n l√Ω tr·∫°ng th√°i voice connection v√† ph√°t nh·∫°c ---
class VoiceState:
    def __init__(self, bot: commands.Bot, ctx: commands.Context):
        self.bot = bot
        self._ctx = ctx
        self.current = None
        self.voice = None
        self.next = asyncio.Event()
        self.songs = SongQueue()
        self._loop = False
        self._volume = 0.5  # M·∫∑c ƒë·ªãnh √¢m l∆∞·ª£ng 50%
        self.skip_votes = set()
        self.audio_player = bot.loop.create_task(self.audio_player_task())

    def __del__(self):
        if self.audio_player and not self.audio_player.done():
            self.audio_player.cancel()

    @property
    def loop(self):
        return self._loop

    @loop.setter
    def loop(self, value: bool):
        self._loop = value

    @property
    def volume(self):
        return self._volume

    @volume.setter
    def volume(self, value: float):
        self._volume = value
        if self.voice and self.voice.source:
            self.voice.source.volume = value

    @property
    def is_playing(self):
        return self.voice and self.current

    async def audio_player_task(self):
        while True:
            self.next.clear()
            if not self.loop:
                try:
                    async with timeout(300):  # 5 ph√∫t timeout
                        self.current = await self.songs.get()
                except asyncio.TimeoutError:
                    await self._ctx.send("Kh√¥ng c√≥ nh·∫°c trong 5 ph√∫t, t√¥i t·ª± ƒë·ªông r·ªùi k√™nh.")
                    self.bot.loop.create_task(self.stop())
                    return

            if not self.voice or not self.voice.is_connected():
                print("Voice client kh√¥ng c√≤n ho·∫°t ƒë·ªông, d·ª´ng audio_player_task.")
                break

            self.current.source.volume = self._volume
            self.voice.play(self.current.source, after=self.play_next_song)
            await self.current.source.channel.send(embed=self.current.create_embed())
            await self.next.wait()

    def play_next_song(self, error=None):
        if error:
            print(f'L·ªói ph√°t nh·∫°c: {error}')
            asyncio.run_coroutine_threadsafe(self._ctx.send(f'ƒê√£ x·∫£y ra l·ªói khi ph√°t nh·∫°c: {error}'), self.bot.loop)
        self.next.set()

    def skip(self):
        self.skip_votes.clear()
        if self.is_playing:
            self.voice.stop()

    async def stop(self):
        self.songs.clear()
        if self.voice:
            await self.voice.disconnect()
        self.voice = None
        self.current = None
        if self.audio_player and not self.audio_player.done():
            self.audio_player.cancel()


# --- Helper function for checks ---
async def is_in_voice_channel(ctx: commands.Context):
    if not ctx.author.voice or not ctx.author.voice.channel:
        raise commands.CommandError('M√†y kh√¥ng ·ªü trong k√™nh tho·∫°i √†?')
    return True


# --- Class Music (Cog) ---
class music(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.voice_states = {}

    def get_voice_state(self, ctx: commands.Context):
        state = self.voice_states.get(ctx.guild.id)
        if not state:
            state = VoiceState(self.bot, ctx)
            self.voice_states[ctx.guild.id] = state
        return state

    def cog_unload(self):
        for state in self.voice_states.values():
            self.bot.loop.create_task(state.stop())

    def cog_check(self, ctx: commands.Context):
        if not ctx.guild:
            raise commands.NoPrivateMessage('M√†y nh·∫Øn ri√™ng th√¨ Tao kh√¥ng ch∆°i.')
        return True

    async def cog_before_invoke(self, ctx: commands.Context):
        ctx.voice_state = self.get_voice_state(ctx)

    async def cog_command_error(self, ctx: commands.Context, error: commands.CommandError):
        if isinstance(error, commands.CommandInvokeError):
            print(f"L·ªói trong l·ªánh '{ctx.command.qualified_name}':")
            import traceback
            traceback.print_exception(type(error.original), error.original, error.original.__traceback__)
            await ctx.send(f'Tao g·∫∑p l·ªói r·ªìi th·∫±ng ml: {error.original}')
        else:
            await ctx.send(f'Tao g·∫∑p l·ªói r·ªìi th·∫±ng ml: {error}')

    # --- C√°c l·ªánh c·ªßa Music Bot ---
    @commands.command(name='join', invoke_without_subcommand=True)
    @commands.check(is_in_voice_channel)
    async def _join(self, ctx: commands.Context):
        destination = ctx.author.voice.channel
        if ctx.voice_state.voice:
            if ctx.voice_state.voice.channel != destination:
                await ctx.voice_state.voice.move_to(destination)
                await ctx.send(f'ƒê√£ chuy·ªÉn sang k√™nh tho·∫°i: **{destination}**')
            else:
                await ctx.send('Tao ƒë√£ ·ªü trong k√™nh c·ªßa m√†y r·ªìi, ƒë·ªì ƒë·∫ßn.')
        else:
            ctx.voice_state.voice = await destination.connect()
            await ctx.send(f"Tao ƒë√£ v√†o k√™nh: **{destination}** r·ªìi, con ml.")

    @commands.command(name='summon')
    @commands.has_permissions(manage_guild=True)
    async def _summon(self, ctx: commands.Context, *, channel: discord.VoiceChannel = None):
        if not channel:
            if not ctx.author.voice or not ctx.author.voice.channel:
                raise commands.CommandError('M√†y kh√¥ng ·ªü trong k√™nh tho·∫°i n√†o c·∫£ ƒë·ªÉ tao summon ƒë√¢u.')
            channel = ctx.author.voice.channel

        if ctx.voice_state.voice:
            if ctx.voice_state.voice.channel != channel:
                await ctx.voice_state.voice.move_to(channel)
                await ctx.send(f'ƒê√£ chuy·ªÉn sang k√™nh tho·∫°i: **{channel}**')
            else:
                await ctx.send('Tao ƒë√£ ·ªü trong k√™nh tho·∫°i ƒë√≥ r·ªìi.')
        else:
            ctx.voice_state.voice = await channel.connect()
            await ctx.send(f'ƒê√£ v√†o k√™nh tho·∫°i: **{channel}**')

    @commands.command(name='leave', aliases=['disconnect', 'dc'])
    async def _leave(self, ctx: commands.Context):
        if not ctx.voice_state.voice:
            return await ctx.send('Tao ch∆∞a v√†o k√™nh n√†o c·∫£, ƒë·ªì ƒë·∫ßn.')

        if ctx.voice_state.audio_player and not ctx.voice_state.audio_player.done():
            ctx.voice_state.audio_player.cancel()

        await ctx.voice_state.stop()
        del self.voice_states[ctx.guild.id]
        await ctx.message.add_reaction('‚úÖ')
        await ctx.send("Tao out ƒë√¢y, bye m·∫π m√†y.")

    @commands.command(name='volume', aliases=['vol'])
    async def _volume(self, ctx: commands.Context, *, volume: int):
        if not ctx.voice_state.is_playing:
            return await ctx.send('Hi·ªán t·∫°i kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t.')

        if not 0 <= volume <= 100:
            return await ctx.send('M√†y t∆∞·ªüng volume l√† mu·ªën bao nhi√™u c≈©ng ƒë∆∞·ª£c √†? 0 ƒë·∫øn 100 th√¥i.')

        ctx.voice_state.volume = volume / 100
        await ctx.send(f'Tao ƒë√£ ch·ªânh volume l√™n **{volume}%** r·ªìi, h√†i l√≤ng ch∆∞a con ml?')

    @commands.command(name='now', aliases=['np', 'current', 'playing'])
    async def _now(self, ctx: commands.Context):
        if not ctx.voice_state.is_playing:
            return await ctx.send('Hi·ªán t·∫°i kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t.')
        await ctx.send(embed=ctx.voice_state.current.create_embed())
        await ctx.send("Tao ƒëang ph√°t b√†i n√†y ƒë√≥, nghe k·ªπ v√†o.")

    @commands.command(name='pause', aliases=['pa'])
    async def _pause(self, ctx: commands.Context):
        if ctx.voice_state.is_playing and ctx.voice_state.voice.is_playing():
            ctx.voice_state.voice.pause()
            await ctx.message.add_reaction('‚è∏Ô∏è')
            await ctx.send("Tao pause l·∫°i ƒë√¢y ƒë·ªÉ m√†y ngh·ªâ h√≠t th·ªü.")
        else:
            await ctx.send("Kh√¥ng c√≥ b√†i h√°t n√†o ƒë·ªÉ t·∫°m d·ª´ng ho·∫∑c ƒë√£ t·∫°m d·ª´ng r·ªìi.")

    @commands.command(name='resume', aliases=['re'])
    async def _resume(self, ctx: commands.Context):
        if ctx.voice_state.is_playing and ctx.voice_state.voice.is_paused():
            ctx.voice_state.voice.resume()
            await ctx.message.add_reaction('‚ñ∂Ô∏è')
            await ctx.send("Tao ti·∫øp t·ª•c ph√°t ƒë√¢y, ƒë·ª´ng c√≥ ng·∫Øt gi·ªØa ch·ª´ng n·ªØa.")
        else:
            await ctx.send("Kh√¥ng c√≥ b√†i h√°t n√†o ƒë·ªÉ ti·∫øp t·ª•c ho·∫∑c ƒëang ph√°t r·ªìi.")

    @commands.command(name='stop', aliases=['close'])
    async def _stop(self, ctx: commands.Context):
        if not ctx.voice_state.voice:
            return await ctx.send('Tao ch∆∞a v√†o k√™nh n√†o c·∫£ ƒë·ªÉ d·ª´ng.')

        await ctx.voice_state.stop()
        del self.voice_states[ctx.guild.id]
        await ctx.message.add_reaction('‚èπÔ∏è')
        await ctx.send("Tao t·∫Øt h·∫øt b√†i h√°t ƒëi r·ªìi, kh·ªèi nghe n·ªØa.")

    @commands.command(name='skip', aliases=['sk'])
    async def _skip(self, ctx: commands.Context):
        if not ctx.voice_state.is_playing:
            return await ctx.send('Hi·ªán t·∫°i kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t.')

        voter = ctx.author

        if voter == ctx.voice_state.current.requester:
            await ctx.message.add_reaction('‚è≠Ô∏è')
            ctx.voice_state.skip()
            return await ctx.send("B√†i n√†y b·ªã skip v√¨ th·∫±ng request n√≥ ngu vl.")

        if voter.id in ctx.voice_state.skip_votes:
            return await ctx.send('M√†y ƒë√£ vote skip r·ªìi m√† c√≤n vote n·ªØa √†?')

        ctx.voice_state.skip_votes.add(voter.id)

        members_in_channel = [m for m in ctx.voice_state.voice.channel.members if not m.bot and m.voice]
        if len(members_in_channel) <= 1:
            await ctx.message.add_reaction('‚è≠Ô∏è')
            ctx.voice_state.skip()
            return await ctx.send("Kh√¥ng c√≥ ai kh√°c trong k√™nh, t·ª± ƒë·ªông b·ªè qua.")

        required_votes = math.ceil(len(members_in_channel) / 2)
        if len(ctx.voice_state.skip_votes) >= required_votes:
            await ctx.message.add_reaction('‚è≠Ô∏è')
            ctx.voice_state.skip()
            await ctx.send(f'ƒê·ªß {required_votes} phi·∫øu, ƒë√£ b·ªè qua b√†i h√°t.')
        else:
            await ctx.send(f'C√≥ th√™m 1 vote skip, hi·ªán t·∫°i {len(ctx.voice_state.skip_votes)}/{required_votes} vote.')

    @commands.command(name='queue', aliases=['q', 'playlist'])
    async def _queue(self, ctx: commands.Context, *, page: int = 1):
        if len(ctx.voice_state.songs) == 0:
            return await ctx.send('H√†ng ƒë·ª£i tr·ªëng, m√†y kh√¥ng bi·∫øt add b√†i √†?')

        items_per_page = 10
        pages = math.ceil(len(ctx.voice_state.songs) / items_per_page)
        if page > pages or page <= 0:
            return await ctx.send(f'Trang kh√¥ng h·ª£p l·ªá. C√≥ {pages} trang.')

        start = (page - 1) * items_per_page
        end = start + items_per_page

        current_song_info = ""
        if ctx.voice_state.current:
            status = "ƒêang ph√°t" if not ctx.voice_state.loop else "ƒêang l·∫∑p l·∫°i"
            current_song_info = f'**{status}:** [{ctx.voice_state.current.source.title}]({ctx.voice_state.current.source.url})\n'

        queue_display = ''
        for i, song in enumerate(ctx.voice_state.songs[start:end], start=start):
            queue_display += f'`{i + 1}.` [{song.source.title}]({song.source.url})\n'

        embed = (discord.Embed(title='H√†ng ƒë·ª£i üéº',
                               description=f'{current_song_info}**{len(ctx.voice_state.songs)} b√†i h√°t trong h√†ng ƒë·ª£i:**\n{queue_display}',
                               color=discord.Color.dark_teal())
                 .set_footer(text=f'Trang {page}/{pages}'))
        await ctx.send(embed=embed)
        await ctx.send("ƒê√¢y l√† h√†ng ƒë·ª£i c·ªßa m√†y, t·ª± xem ƒëi.")

    @commands.command(name='shuffle')
    async def _shuffle(self, ctx: commands.Context):
        if len(ctx.voice_state.songs) == 0:
            return await ctx.send('H√†ng ƒë·ª£i tr·ªëng, m√†y kh√¥ng bi·∫øt x√°o tr·ªôn √†?')
        ctx.voice_state.songs.shuffle()
        await ctx.message.add_reaction('‚úÖ')
        await ctx.send('ƒê√£ x√°o tr·ªôn h√†ng ƒë·ª£i.')

    @commands.command(name='remove', aliases=['rm'])
    async def _remove(self, ctx: commands.Context, index: int):
        if len(ctx.voice_state.songs) == 0:
            return await ctx.send('H√†ng ƒë·ª£i tr·ªëng, m√†y kh√¥ng c√≥ g√¨ ƒë·ªÉ x√≥a.')

        if not (1 <= index <= len(ctx.voice_state.songs)):
            return await ctx.send(f'S·ªë th·ª© t·ª± b√†i h√°t kh√¥ng h·ª£p l·ªá. Ch·ªâ c√≥ t·ª´ 1 ƒë·∫øn {len(ctx.voice_state.songs)}.')

        if ctx.voice_state.songs.remove(index - 1):
            await ctx.message.add_reaction('‚úÖ')
            await ctx.send(f'ƒê√£ x√≥a b√†i h√°t s·ªë {index} kh·ªèi h√†ng ƒë·ª£i.')
        else:
            await ctx.send('Kh√¥ng th·ªÉ x√≥a b√†i h√°t.')

    @commands.command(name='loop')
    async def _loop(self, ctx: commands.Context):
        if not ctx.voice_state.is_playing:
            return await ctx.send('Kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t.')
        ctx.voice_state.loop = not ctx.voice_state.loop
        status = 'b·∫≠t' if ctx.voice_state.loop else 't·∫Øt'
        await ctx.message.add_reaction('‚úÖ')
        await ctx.send(f'Ch·∫ø ƒë·ªô l·∫∑p l·∫°i ƒë√£ ƒë∆∞·ª£c **{status}**.')

    @commands.command(name='play', aliases=['p'])
    @commands.check(is_in_voice_channel)
    async def _play(self, ctx: commands.Context, *, search: str):
        if not ctx.voice_state.voice:
            destination = ctx.author.voice.channel
            try:
                ctx.voice_state.voice = await destination.connect()
                await ctx.send(f"Tao ƒë√£ v√†o k√™nh: **{destination}** r·ªìi, con ml.")
            except Exception as e:
                return await ctx.send(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn k√™nh tho·∫°i: {e}")
            await asyncio.sleep(0.5)

        async with ctx.typing():
            try:
                source = await YTDLSource.create_source(ctx, search, loop=self.bot.loop)
            except YTDLError as e:
                return await ctx.send(f'Tao kh√¥ng t√¨m ƒë∆∞·ª£c b√†i "{search}", m√†y g√µ ƒë√∫ng t√™n coi. L·ªói: {e}')
            except Exception as e:
                import traceback
                traceback.print_exc()
                return await ctx.send(f'ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi t√¨m b√†i h√°t: {e}')
            else:
                song = Song(source)
                await ctx.voice_state.songs.put(song)
                await ctx.send(f'Tao ƒë√£ cho "{source.title}" v√†o h√†ng ƒë·ª£i r·ªìi, ch·ªù ƒëi.')


# H√†m setup cho cog, ph·∫£i l√† async
async def setup(bot):
    await bot.add_cog(music(bot))
